// Define global lists for device types, fonts, and classes
$device-type-list: "", "laptop", "tablet", "mobile";
$font-list: "Bold", "Medium", "Regular", "SemiBold";
$class-list: "H1", "H2", "H3", "H4", "XXL", "XL", "L", "M", "S", "XS", "XXS", "XXXS", "PDF", "PDF_SMALL";

/**
 * Generates a fallback CSS custom property for a given class and property
 *
 * @param {string} $class - The class name (e.g., XXL, XL, etc.)
 * @param {string} $property - The property name (e.g., font-size, line-height, etc.)
 * @param {string} $postfix - The size postfix (e.g., laptop, tablet, mobile, etc.)
 * @return {string} - The final CSS variable fallback string
 */
@function fallback-property($class, $property, $postfix) {
    $fallback: --#{$class}-#{$property};

    @if ($postfix == "") {
        @return var($fallback);
    }

    @each $_device in $device-type-list {
        @if $_device != "" {
            $fallback:
                --#{$class}-#{$property}-#{$_device},
                var($fallback);

            @if $_device == $postfix {
                @return var($fallback);
            }
        }
    }

    @return var($fallback);
}

/**
 * Generates media queries for different screen sizes
 *
 * @param {string} $device - The device type (e.g., laptop, tablet, mobile)
 */
@mixin create-media-queries($device) {
    @if $device == "laptop" {
        @media (min-width: 1025px) and (max-width: 1440px) {
            @content;
        }
    } @else if $device == "tablet" {
        @media (min-width: 511px) and (max-width: 1024px) {
            @content;
        }
    } @else if $device == "mobile" {
        @media (max-width: 510px) {
            @content;
        }
    }
}

@mixin create-container-queries($device) {
    @if $device == "" {
        @container style(--device-size) and style(--device-size: desktop) {
            @content;
        }
    } @else if $device == "laptop" {
        @container style(--device-size) and style(--device-size: #{$device}) {
            @content;
        }
    } @else if $device == "tablet" {
        @container style(--device-size) and style(--device-size: #{$device}) {
            @content;
        }
    } @else if $device == "mobile" {
        @container style(--device-size) and style(--device-size: #{$device}) {
            @content;
        }
    }
}

/**
 * Generates size-related styles for a given class and device type
 *
 * @param {string} $class - The class name (e.g., XXL, XL, etc.)
 * @param {string} $postfix - The device type postfix (e.g., laptop, tablet, mobile)
 */
@mixin create-size-style($class) {
    // @if $postfix == "" {
    .#{$class} {
        --font-size: var(--#{$class}-font-size);
        --line-height: var(--#{$class}-line-height);

        @each $postfix in $device-type-list {
            @include create-media-queries($postfix) {
                --font-size: #{fallback-property($class, font-size, $postfix)};
                --line-height: #{fallback-property($class, line-height, $postfix)};
            }
        }
    }
    // } @else {
    //     @include create-media-queries($postfix) {
    //         .#{$class} {
    // --font-size: #{fallback-property($class, font-size, $postfix)};
    // --line-height: #{fallback-property($class, line-height, $postfix)};
    //         }
    // .#{$class}_#{$postfix} {
    //     --font-size: #{fallback-property($class, font-size, $postfix)};
    //     --line-height: #{fallback-property($class, line-height, $postfix)};
    // }
    //     }
    // }
}

@mixin create-size-postfix-style($class, $postfix) {
    @if $postfix != "" {
        @include create-media-queries($postfix) {
            .#{$class}_#{$postfix} {
                --font-size: #{fallback-property($class, font-size, $postfix)};
                --line-height: #{fallback-property($class, line-height, $postfix)};
            }
        }
    }
}

/**
 * Generates font-family and font-weight styles for a given class and device type
 *
 * @param {string} $class - The class name (e.g., XXL, XL, etc.)
 * @param {string} $postfix - The device type postfix (e.g., laptop, tablet, mobile)
 */
@mixin create-font-style($class, $postfix) {
    @if $postfix == "" {
        .#{$class} {
            --font-family: var(--#{$class}-font-family);
        }
    } @else {
        .#{$class}_#{$postfix} {
            @include create-media-queries($postfix) {
                --font-family: #{fallback-property($class, font-family, $postfix)};
            }
        }
    }
}

@mixin create-container-styles($class, $postfix) {
    @include create-container-queries($postfix) {
        .#{$class} {
            --font-size: #{fallback-property($class, font-size, $postfix)};
            --line-height: #{fallback-property($class, line-height, $postfix)};
        }
    }
}

// Generate font styles for all classes and device types
@each $postfix in $device-type-list {
    @each $font in $font-list {
        @include create-font-style($font, $postfix);
    }
}

// @each $postfix in $device-type-list {
@each $class in $class-list {
    @include create-size-style($class);
}
// }

@each $postfix in $device-type-list {
    @each $class in $class-list {
        @include create-size-postfix-style($class, $postfix);
    }
}

@each $postfix in $device-type-list {
    @each $class in $class-list {
        @include create-container-styles($class, $postfix);
    }
}
